/*

Требования:
- Платформа node.js
Тип
-Консольное приложение
ТЗ
Приложение должно принимать на вход два параметра:
- Рабочую директорию
- Файл-объект в формате JSON. Наполнение: {“key”: String,..}
Задача:
Рекурсивный поиск и замена подстрок во всех файлах из рабочей
директории. Поиск – по ключам из файла с объектом JSON, замена –
значение, которое соответствует ключу.
Пример использования:
- # node index.js ./dir search.json

*/


//Подключение библиотеки для работы с файловой системой
var fs = require('fs');

//Подклчение библиотеки для работы с путями к файлам и директориям
var path = require('path');

//Переданный параметр (рабочая директория) в строке через терминал 
var directory = process.argv[2];

//Переданный параметр (файл-объект с элментами замены определенных подстрок) в строке через терминал
var searchFile = process.argv[3];

//Функция поиска всех вложенный файлов рабочей директории
var dirContent = function(dir, done) {
    //Массив, который будет содержать пути всех найденных файлов
    var results = [];
    //Асинхронное чтение рабочей директории
    fs.readdir(dir, function(err, list) {
        //Обработка ошибки при чтении
        if (err) return done(err);
        //Обратный счетчик вложений директория
        var pending = list.length;
        //При пустом значении обратного счетчика выход из функции
        if (!pending) return done(null, results);
        //Обход каждого вложенного элемента
        list.forEach(function(file) {
            //Формирование абслолютного пути к вложенным файлам
            file = path.resolve(dir, file);
            //Функция возвращения подробной информации о том, что расположено по определенному пути
            fs.stat(file, function(err, stat) {
                //Проверка, является ли директорией конечный элемент в пути. Если является, то рекурсивно вызываем функцию поиска
                //вложенных файлов, объединяем полученную информацию с массивом и уменьшаем обратный счетчик. Иначе добавляем
                //путь в массив и уменьшаем обратный счетчик. При пустом значении обратного счетчика выход из функции
                if (stat && stat.isDirectory()) {
                    dirContent(file, function(err, res) {
                        results = results.concat(res);
                        if (!--pending) done(null, results);
                    });
                } else {
                    results.push(file);
                    if (!--pending) done(null, results);
                }
            });
        });
    });
};

//Вызов функции поиска всех вложенный файлов рабочей директории
dirContent(directory, function(err, results) {
    if (err) throw err;
    //Синхронное чтение файла-объекта с элементами замены определенных подстрок
    var searchArray =fs.readFileSync(searchFile, 'utf8');
    //Перевод строки с даннми формата JSON в массив
    searchArray=JSON.parse(searchArray);
    //Обход массива с путями всех вложенных файлов рабочей директории, полученных с помощью функции dirContent
    for (i in results){
        //Цикл для прохода по всем ключам из файла с элементами замены определенных подстрок
        for (key in searchArray) {
            //Синхронное чтение файла из полученного массива со всеми вложенными файлами рабочей директории
            var dirArray = fs.readFileSync(results[i], 'utf8');
            //При совпадении подстроки и ключа замена подстроки на значение, которое соответствует ключу
            var change = dirArray.replace(new RegExp(key, 'g'), searchArray[key]);
            //Синхронная запись изменения в файл
            dirArray = fs.writeFileSync(results[i], change, 'utf8');
        }
    }
});
